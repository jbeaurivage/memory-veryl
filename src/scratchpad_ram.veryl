pub interface ScratchpadRamPort #(
    param DATA_WIDTH: u32 = 32,
    param ADDR_WIDTH: u32 = 16,
) {

    var address     : logic<ADDR_WIDTH>;
    var data        : logic<DATA_WIDTH>;
    var write_enable: logic            ;

    modport read_slave {
        address: input ,
        data   : output,
    }

    modport read_master {
        ..converse(read_slave)
    }

    modport read_observer {
        address: input,
        data   : input,
    }

    modport write_master {
        address     : output,
        data        : output,
        write_enable: output,
    }

    modport write_slave {
        ..converse(write_master)
    }

    // Technically the same as write_slave,
    // but kept for consistency. Semantically
    // the observer modports won't change
    // the slave's state
    modport write_observer {
        address     : input,
        data        : input,
        write_enable: input,
    }
}

/// Distributed RAM with synchronous writes
/// and asynchronous reads. Can specify
/// multiple read ports.
pub module ScratchpadRam #(
    /// Number of read ports
    param READ_PORTS: u8 = 1,
    /// Data width, in bits
    param DATA_WIDTH: u32 = 32,
    /// Number of elements this RAM holds
    param DEPTH     : u64 = 256          ,
    param ADDR_WIDTH: u32 = $clog2(DEPTH),
) (
    clk: input clock,
    rst: input reset,

    // Writes
    write: modport ScratchpadRamPort::write_slave,

    // Reads
    read: modport ScratchpadRamPort::read_slave [READ_PORTS],
) {

    var mem: logic<DATA_WIDTH> [DEPTH];

    // Asynchronous read logic
    for p in 0..READ_PORTS :asgn_read {
        assign read[p].data = mem[read[p].address];
    }

    // Write logic
    always_ff {
        if_reset {
            for i: u64 in 0..DEPTH {
                mem[i[ADDR_WIDTH - 1:0]] = 0;
            }
        } else {
            if write.write_enable {
                mem[write.address] = write.data;
            }
        }
    }
}
