/// Single port, synthesizable block RAM with a Wishbone interface.
///
/// Adheres to the Wishbone B4 pipelined specification
/// Memory is byte-addressed, but must always be word-aligned
pub module WishboneRam #(
    /// Initialize memory with hex file if not empty
    param INIT_FILE : string = "",
    param ADDR_WIDTH: u8     = 32,
    param DATA_WIDTH: u8     = 32,
    /// RAM size, in bytes
    param SIZE: u32 = 4096,
) (
    clk: input clock           ,
    rst: input reset_async_high,

    wb: modport Wishbone::slave,
) {
    const COL_WIDTH     : u8  = 8;
    const NUM_COL       : u8  = DATA_WIDTH / COL_WIDTH;
    const RAM_DEPTH     : u32 = SIZE / {24'b0, NUM_COL};
    const MEM_ADDR_WIDTH: u32 = $clog2(RAM_DEPTH);

    let rst_n: reset = rst as reset;

    inst ram_port: BramPort #( ADDR_WIDTH: MEM_ADDR_WIDTH, NUM_COL, COL_WIDTH );

    inst ram: SinglePortBlockRam #(
        INIT_FILE                 ,
        NUM_COL                   ,
        COL_WIDTH                 ,
        RAM_DEPTH                 ,
        ADDR_WIDTH: MEM_ADDR_WIDTH,
    ) (
        clk       ,
        rst: rst_n,

        port: ram_port,
    );

    inst ram2wb: Bram2Wishbone #(
        ADDR_WIDTH      ,
        DATA_WIDTH      ,
        MEM_ADDR_WIDTH  ,
    ) (
        clk  ,
        rst  ,

        wb        ,
        ram_port  ,
    );
}
